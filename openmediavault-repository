#!/bin/bash

set -e
set -x

export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

SCRIPTNAME=$(basename "$0")
SCRIPTDIR=$(cd `dirname "$0"` && pwd)
SCRIPTSDIR="${SCRIPTDIR}/.scripts"

################################################################################
## Need Packages

NEEDEDPACKAGES=""
if [ -z `which git` ]; then NEEDEDPACKAGES+="git-core "; fi
if [ -n "${NEEDEDPACKAGES}" ]; then
	echo "Need ${NEEDEDPACKAGES}, installing..."
	apt-get -qq -y install ${NEEDEDPACKAGES}
fi

################################################################################
## Need TEMPDIR

TEMPDIR=$(mktemp -d -t ${SCRIPTNAME}.XXXXXXXXXX)
LOCKFILE=${TEMPDIR}.lock
[ -f "${LOCKFILE}" ] && echo "ERROR ${LOCKFILE} already exist. !!!" && exit 255

################################################################################
## Need CleanUp

function clean_up() {
	
	echo "Clean up ..."
	
	rm -Rf "${TEMPDIR}"
	rm -f "${LOCKFILE}"
	
	trap "" SIGHUP SIGINT SIGTERM SIGQUIT EXIT
	if [ "$1" != "0" ]; then
		echo "ERROR ..."
		exit $1
	else
		echo "DONE ..."
		exit 0
	fi
}

function print_help() {
	echo "
${SCRIPTNAME}  version 0.1b
Copyright (C) 2015 by Simon Baur (sbausis at gmx dot net)

Usage: ${SCRIPTNAME} [OPTIONS]... -o [OUTDIR]

Options
 -o          set OUTDIR
 -m          redownload Mirror
 -b          build Packages
 -c          copy Packages to Repo
 -d          rebuild Repo
"
}

function help_exit() {
	print_help
	clean_up 1
}

################################################################################
## Need LOCKFILE

trap "{ clean_up 255; }" SIGHUP SIGINT SIGTERM SIGQUIT EXIT
touch ${LOCKFILE}

################################################################################
# get Arguments

OUTDIR=""
MIRROR="1"
BUILD="1"
COPY="1"
DEBARCHIVE="1"

while getopts ":o:mbcd" opt; do
	case $opt in
		o) OUTDIR="$OPTARG" ;;
		m) MIRROR="0" ;;
		b) BUILD="0" ;;
		c) COPY="0" ;;
		d) DEBARCHIVE="0" ;;
		\?) echo "Invalid option: -$OPTARG" >&2 && help_exit ;;
		:) echo "Option -$OPTARG requires an argument." >&2 && help_exit ;;
	esac
done

################################################################################
# need newest Script installed

REMOTE_REF=$(git ls-remote https://github.com/sbausis/${SCRIPTNAME}.git | grep "refs/heads/master" | awk '{print $1}')
[ -f "/usr/local/lib/${SCRIPTNAME}/${SCRIPTNAME}.ref" ] && LOCAL_REF=$(cat "/usr/local/lib/${SCRIPTNAME}/${SCRIPTNAME}.ref")

if [ ! -f "/usr/local/bin/${SCRIPTNAME}" ] || [ -z "${LOCAL_REF}" ] || [ "${LOCAL_REF}" != "${REMOTE_REF}" ] || [ "${INSTALL}" == "0" ]; then
	
	echo "Installing to /usr/local/lib/${SCRIPTNAME} ..."
	git clone https://github.com/sbausis/${SCRIPTNAME}.git ${TEMPDIR}/${SCRIPTNAME}
	rm -Rf /usr/local/lib/${SCRIPTNAME}
	mkdir -p /usr/local/lib/${SCRIPTNAME}
	cp -Rf ${TEMPDIR}/${SCRIPTNAME}/${SCRIPTNAME} ${TEMPDIR}/${SCRIPTNAME}/.scripts /usr/local/lib/${SCRIPTNAME}/
	echo "${REMOTE_REF}" > "/usr/local/lib/${SCRIPTNAME}/${SCRIPTNAME}.ref"
	cat <<EOF > /usr/local/bin/${SCRIPTNAME}
#!/bin/bash
bash /usr/local/lib/${SCRIPTNAME}/${SCRIPTNAME} \$@
exit \$?
EOF
	chmod +x /usr/local/bin/${SCRIPTNAME}
	/usr/local/bin/${SCRIPTNAME} $@
	clean_up $?

fi

################################################################################
# need Arguments

[ -z "${OUTDIR}" ] && [ -f ~/.openmediavault-repository ] && source ~/.openmediavault-repository

if [ ! -d "${OUTDIR}" ]; then
	echo "no OUTDIR"
	help_exit
fi

################################################################################

function mirror_repository() {
	local SCRIPTSDIR="$1"
	local OUTDIR="$2"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.openmediavault-mirror" \
		-u "http://packages.openmediavault.org/public" \
		-s "stoneburner" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.omvextras-mirror" \
		-u "http://omv-extras.org/debian" \
		-s "stoneburner-backports stoneburner stoneburner-testing stoneburner-vb stoneburner-plex stoneburner-greyhole stoneburner-vdr stoneburner-btsync stoneburner-gluster stoneburner-mono stoneburner-mono-testing stoneburner-hwraid" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.dh2k-mirror" \
		-u "http://dh2k.omv-extras.org/debian" \
		-s "stoneburner-miller stoneburner-miller-testing stoneburner-vpn plex-wheezy-mirror virtualbox-wheezy-mirror" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.bintray-stoneburner-beta-mirror" \
		-u "http://dl.bintray.com/openmediavault-plugin-developers/stoneburner-beta" \
		-s "wheezy" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.bintray-stoneburner-zfs-mirror" \
		-u "http://dl.bintray.com/openmediavault-plugin-developers/stoneburner-zfs" \
		-s "wheezy" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.bintray-stoneburner-zfs-testing-mirror" \
		-u "http://dl.bintray.com/openmediavault-plugin-developers/stoneburner-zfstesting" \
		-s "wheezy" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.bintray-stoneburner-docker-mirror" \
		-u "http://dl.bintray.com/openmediavault-plugin-developers/stoneburner-docker" \
		-s "wheezy" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/mirror_repository \
		-d "${OUTDIR}/.bintray-stoneburner-docker-testing-mirror" \
		-u "http://dl.bintray.com/openmediavault-plugin-developers/stoneburner-docker2" \
		-s "wheezy" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
}

function build_package() {
	local SCRIPTSDIR="$1"
	local OUTDIR="$2"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault" \
		-b "main"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-p "openmediavault" \
		-b "testing"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault-keyring" \
		-b "main"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-p "openmediavault-keyring" \
		-b "testing"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault-menuconfig" \
		-b "master"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-p "openmediavault-menuconfig" \
		-b "testing"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-p "openmediavault-testplugin" \
		-b "master"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault-firewall" \
		-b "master"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-p "openmediavault-firewall" \
		-b "testing"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.omvextras-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault-omvextrasorg" \
		-b "main"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.omvextras-build" \
		-s "stoneburner" \
		-c "main" \
		-p "openmediavault-ddclient" \
		-b "main"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.omvextras-build" \
		-s "stoneburner-testing" \
		-c "main" \
		-p "openmediavault-pxe" \
		-b "main"
	############################################################################
	${SCRIPTSDIR}/build_package \
		-o "${OUTDIR}/.omvextras-build" \
		-s "stoneburner-testing" \
		-c "main" \
		-p "openmediavault-dnsmasq" \
		-b "main"
	############################################################################
}

function copy_packages() {
	local SCRIPTSDIR="$1"
	local OUTDIR="$2"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/openmediavault" \
		-i "${OUTDIR}/.openmediavault-mirror ${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-a "amd64 i386" \
		-r
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/openmediavault" \
		-i "${OUTDIR}/.openmediavault-mirror ${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "main" \
		-k "testing" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/openmediavault" \
		-i "${OUTDIR}/.openmediavault-mirror ${OUTDIR}/.openmediavault-build" \
		-s "stoneburner" \
		-c "testing" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.omvextras-mirror ${OUTDIR}/.omvextras-build" \
		-s "stoneburner-backports stoneburner stoneburner-testing stoneburner-vb stoneburner-plex stoneburner-greyhole stoneburner-vdr stoneburner-btsync stoneburner-gluster stoneburner-mono stoneburner-mono-testing stoneburner-hwraid" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.dh2k-mirror ${OUTDIR}/.dh2k-build" \
		-s "stoneburner-miller stoneburner-miller-testing stoneburner-vpn plex-wheezy-mirror virtualbox-wheezy-mirror" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.bintray-stoneburner-beta-mirror ${OUTDIR}/.bintray-stoneburner-beta-build" \
		-s "wheezy" \
		-z "stoneburner-beta" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.bintray-stoneburner-zfs-mirror ${OUTDIR}/.bintray-stoneburner-zfs-build" \
		-s "wheezy" \
		-z "stoneburner-zfs" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.bintray-stoneburner-zfs-testing-mirror ${OUTDIR}/.bintray-stoneburner-zfs-testing-build" \
		-s "wheezy" \
		-z "stoneburner-zfs-testing" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.bintray-stoneburner-docker-mirror ${OUTDIR}/.bintray-stoneburner-docker-build" \
		-s "wheezy" \
		-z "stoneburner-docker" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
	${SCRIPTSDIR}/copy_packages \
		-d "${OUTDIR}/omvextras" \
		-i "${OUTDIR}/.bintray-stoneburner-docker-testing-mirror ${OUTDIR}/.bintray-stoneburner-docker-testing-build" \
		-s "wheezy" \
		-z "stoneburner-docker-testing" \
		-c "main" \
		-a "amd64 i386"
	############################################################################
}

function debarchive_repository() {
	local SCRIPTSDIR="$1"
	local OUTDIR="$2"
	############################################################################
	${SCRIPTSDIR}/debarchive_repository \
		-d "${OUTDIR}/openmediavault" \
		-g "${OUTDIR}/.gnupg" \
		-n "openmediavault" \
		-s "stoneburner" \
		-c "main" \
		-a "amd64 i386" \
		-r
	############################################################################
	${SCRIPTSDIR}/debarchive_repository \
		-d "${OUTDIR}/openmediavault" \
		-g "${OUTDIR}/.gnupg" \
		-n "openmediavault" \
		-s "stoneburner" \
		-c "testing" \
		-a "amd64 i386" \
		-r
	############################################################################
	${SCRIPTSDIR}/debarchive_repository \
		-d "${OUTDIR}/omvextras" \
		-g "${OUTDIR}/.gnupg" \
		-n "omvextras" \
		-s "stoneburner-backports stoneburner stoneburner-testing stoneburner-vb stoneburner-plex stoneburner-greyhole stoneburner-vdr stoneburner-btsync stoneburner-gluster stoneburner-mono stoneburner-mono-testing stoneburner-hwraid stoneburner-miller stoneburner-miller-testing stoneburner-vpn plex-wheezy-mirror virtualbox-wheezy-mirror stoneburner-beta stoneburner-zfs stoneburner-zfs-testing stoneburner-docker stoneburner-docker-testing " \
		-c "main" \
		-a "amd64 i386" \
		-r
	############################################################################
}

################################################################################

echo "[ ${SCRIPTNAME} ] ${OUTDIR}"
STARTTIME=`date +%s`

if [ "${MIRROR}" == "0" ]; then
	echo "download Repository ..."
	mirror_repository "${SCRIPTSDIR}" "${OUTDIR}"
fi

if [ "${BUILD}" == "0" ]; then
	echo "build Packages ..."
	build_package "${SCRIPTSDIR}" "${OUTDIR}"	
fi

if [ "${COPY}" == "0" ]; then
	echo "copy Packages to Repository ..."
	copy_packages "${SCRIPTSDIR}" "${OUTDIR}"	
fi

if [ "${DEBARCHIVE}" == "0" ]; then
	echo "update Repository ..."
	debarchive_repository "${SCRIPTSDIR}" "${OUTDIR}"	
fi

################################################################################

STOPTIME=`date +%s`
RUNTIME=$((STOPTIME-STARTTIME))
echo "Runtime: $RUNTIME sec"

clean_up 0

################################################################################
